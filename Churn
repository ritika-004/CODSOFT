{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"11ida-uOPJ2HqPsPOpV7Les59jzQcensH","timestamp":1747756491968}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"O5Ms8PiM1kcc","executionInfo":{"status":"ok","timestamp":1747756629854,"user_tz":-330,"elapsed":13334,"user":{"displayName":"Ritika Ghosh","userId":"03606085857574979497"}},"outputId":"584ac2f8-5da7-4839-9418-916daeb61a5c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-fd042425-b594-450b-b2f2-74600a27dd8a\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-fd042425-b594-450b-b2f2-74600a27dd8a\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Churn_Modelling.csv to Churn_Modelling.csv\n"]}],"source":["from google.colab import files\n","\n","uploaded = files.upload()"]},{"cell_type":"code","source":["\n"],"metadata":{"id":"kuAZPFNG2X_v","executionInfo":{"status":"ok","timestamp":1747756683753,"user_tz":-330,"elapsed":23,"user":{"displayName":"Ritika Ghosh","userId":"03606085857574979497"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split, RandomizedSearchCV\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score, roc_curve\n","import matplotlib.pyplot as plt\n","\n","# ---------------------------\n","# Step 1: Load dataset\n","# ---------------------------\n","df = pd.read_csv('Churn_Modelling.csv')\n","\n","# ---------------------------\n","# Step 2: Feature Engineering\n","# ---------------------------\n","df = df.drop(['RowNumber', 'CustomerId', 'Surname'], axis=1)\n","df['BalanceSalaryRatio'] = np.where(df['EstimatedSalary'] != 0,\n","                                    df['Balance'] / df['EstimatedSalary'], 0)\n","df['AgeGroup'] = pd.cut(df['Age'], bins=[17, 30, 45, 60, 100],\n","                        labels=['Young', 'Adult', 'MidAge', 'Senior'])\n","\n","# ---------------------------\n","# Step 3: Prepare features and target\n","# ---------------------------\n","X = df.drop('Exited', axis=1)\n","y = df['Exited']\n","X = pd.get_dummies(X, drop_first=True)\n","\n","# ---------------------------\n","# Step 4: Train-Test Split\n","# ---------------------------\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, y, test_size=0.2, random_state=42)\n","\n","# ---------------------------\n","# Step 5: Scale numeric features\n","# ---------------------------\n","num_features = X.select_dtypes(include=['int64', 'float64']).columns\n","scaler = StandardScaler()\n","X_train[num_features] = scaler.fit_transform(X_train[num_features])\n","X_test[num_features] = scaler.transform(X_test[num_features])\n","\n","# ---------------------------\n","# Step 6: Faster Logistic Regression Tuning\n","# ---------------------------\n","lr = LogisticRegression(random_state=42, max_iter=500)\n","\n","param_dist_lr = {\n","    'C': [0.01, 0.1, 1, 10],\n","    'penalty': ['l2'],\n","    'solver': ['lbfgs']\n","}\n","\n","search_lr = RandomizedSearchCV(lr, param_distributions=param_dist_lr,\n","                               n_iter=4, cv=3, scoring='roc_auc', random_state=42)\n","search_lr.fit(X_train, y_train)\n","best_lr = search_lr.best_estimator_\n","\n","# ---------------------------\n","# Step 7: Faster Random Forest Tuning\n","# ---------------------------\n","rf = RandomForestClassifier(random_state=42)\n","\n","param_dist_rf = {\n","    'n_estimators': [50, 100],\n","    'max_depth': [10, None],\n","    'min_samples_split': [2, 5]\n","}\n","\n","search_rf = RandomizedSearchCV(rf, param_distributions=param_dist_rf,\n","                               n_iter=4, cv=3, scoring='roc_auc', random_state=42)\n","search_rf.fit(X_train, y_train)\n","best_rf = search_rf.best_estimator_\n","\n","# ---------------------------\n","# Step 8: Evaluate Logistic Regression\n","# ---------------------------\n","y_pred_lr = best_lr.predict(X_test)\n","y_pred_prob_lr = best_lr.predict_proba(X_test)[:, 1]\n","\n","print(\"Logistic Regression Best Params:\", search_lr.best_params_)\n","print(\"Logistic Regression Accuracy:\", accuracy_score(y_test, y_pred_lr))\n","print(\"Logistic Regression Report:\\n\", classification_report(y_test, y_pred_lr))\n","print(\"Logistic Regression Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred_lr))\n","roc_auc_lr = roc_auc_score(y_test, y_pred_prob_lr)\n","print(f\"Logistic Regression ROC-AUC: {roc_auc_lr:.4f}\")\n","\n","# ---------------------------\n","# Step 9: Evaluate Random Forest\n","# ---------------------------\n","y_pred_rf = best_rf.predict(X_test)\n","y_pred_prob_rf = best_rf.predict_proba(X_test)[:, 1]\n","\n","print(\"\\nRandom Forest Best Params:\", search_rf.best_params_)\n","print(\"Random Forest Accuracy:\", accuracy_score(y_test, y_pred_rf))\n","print(\"Random Forest Report:\\n\", classification_report(y_test, y_pred_rf))\n","print(\"Random Forest Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred_rf))\n","roc_auc_rf = roc_auc_score(y_test, y_pred_prob_rf)\n","print(f\"Random Forest ROC-AUC: {roc_auc_rf:.4f}\")\n","\n","# ---------------------------\n","# Step 10: Plot ROC Curves\n","# ---------------------------\n","fpr_lr, tpr_lr, _ = roc_curve(y_test, y_pred_prob_lr)\n","fpr_rf, tpr_rf, _ = roc_curve(y_test, y_pred_prob_rf)\n","\n","plt.figure(figsize=(8,6))\n","plt.plot(fpr_lr, tpr_lr, label=f'Logistic Regression (AUC = {roc_auc_lr:.4f})')\n","plt.plot(fpr_rf, tpr_rf, label=f'Random Forest (AUC = {roc_auc_rf:.4f})')\n","plt.plot([0,1], [0,1], 'k--')\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('ROC Curve Comparison')\n","plt.legend(loc='lower right')\n","plt.show()\n","\n","# ---------------------------\n","# Step 11: Summary\n","# ---------------------------\n","print(\"\\nSummary:\")\n","print(\"Both models trained with simple feature engineering and faster hyperparameter tuning.\")\n","print(\"Random Forest usually gives better performance, but Logistic Regression is also helpful.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"RtX3LLx31lmJ","executionInfo":{"status":"ok","timestamp":1747756671302,"user_tz":-330,"elapsed":15243,"user":{"displayName":"Ritika Ghosh","userId":"03606085857574979497"}},"outputId":"50f6cd59-7058-4c01-edd8-7966ca6b12a1","collapsed":true},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Logistic Regression Best Params: {'solver': 'lbfgs', 'penalty': 'l2', 'C': 10}\n","Logistic Regression Accuracy: 0.8355\n","Logistic Regression Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.85      0.96      0.90      1607\n","           1       0.68      0.31      0.43       393\n","\n","    accuracy                           0.84      2000\n","   macro avg       0.76      0.64      0.67      2000\n","weighted avg       0.82      0.84      0.81      2000\n","\n","Logistic Regression Confusion Matrix:\n"," [[1548   59]\n"," [ 270  123]]\n","Logistic Regression ROC-AUC: 0.7951\n","\n","Random Forest Best Params: {'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 10}\n","Random Forest Accuracy: 0.862\n","Random Forest Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.87      0.97      0.92      1607\n","           1       0.77      0.42      0.55       393\n","\n","    accuracy                           0.86      2000\n","   macro avg       0.82      0.70      0.73      2000\n","weighted avg       0.85      0.86      0.85      2000\n","\n","Random Forest Confusion Matrix:\n"," [[1557   50]\n"," [ 226  167]]\n","Random Forest ROC-AUC: 0.8653\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Summary:\n","Both models trained with simple feature engineering and faster hyperparameter tuning.\n","Random Forest usually gives better performance, but Logistic Regression is also helpful.\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"bA6Q4bqtPFnv"},"execution_count":null,"outputs":[]}]}